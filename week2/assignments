Q1.
物件導向程式設計(Object-oriented programming)的三大特性之一，如果一個類別B「繼承自」另一個類別A，就把這個B稱為「A的子類」，而把A稱為「B的父類」。
繼承很重要的一點是可以使得子類具有父類別別的各種屬性和方法，而不需要再次編寫相同的程式碼，這有點像是生物分類學，例如哺乳類(父類)底下的各個目(子類)，皆繼承了恆溫(屬性)、有乳腺(屬性)會哺乳(方法)等；當然繼承關係的物件可以不用是生物，任何有關聯的皆可以套用，例如商品(父類)與手機(子類)、交通工具(父類)與汽車(子類)。
在令子類別繼承父類別別的同時，可以重新定義某些屬性，並重寫某些方法，即覆蓋父類別別的原有屬性和方法，使其獲得與父類別不同的功能或屬性。
舉例來說，哺乳類的基本體型為四足步行型(屬性)，大多數哺乳動物會用其四肢在陸地上移動。不過，一些生活在海里、空中、樹上、地下等環境的哺乳動物，靠著經由演化產生的四肢末端形態，來適應不同的生活環境，像是蝙蝠將其中的兩足(屬性)覆蓋掉改為翅膀(重新定義屬性)。

Q2.
如果要依照index來拆開字串的話可以用str.subString()，如果要把字串根據指定內容拆分為List<String>可使用str.split()，可參考Q2.kt。

Q3.
使用Map，程式碼詳見Q3.kt。

Q4.
兩者在存取記憶體的方式不同，Arraylist宣告時須宣告記憶體大小，LinkedList則不需要。
在存取的處理上，Arraylist在新增刪除時需新增新的記憶體做資料的搬移(擴容)，查詢資料時則可會同一塊記憶體區塊查找。
LinkedList在宣告時為動態新增，頭尾index會記錄前一筆資料與後一筆資料的記憶體位置，所以查詢時需要從頭或尾依序尋找位置，但新增刪除時只需要修改前後的index即可。
故Array查詢資料的速度會比較快，但新增刪除的速度較慢()，LinkedList則反之，所以實際增刪頻繁的資料可採用LinkedList，主要用來查詢的資料可採用ArrayList。

Q5.
存放值的型態，常見的類型有
數值型別 Numbers 
字元型別 Char
字串型別 String
布林型別 Boolean
陣列型別 Array

Q6.
Int最大值為2,147,483,647，想表示大於限制的integers可以使用Long。
